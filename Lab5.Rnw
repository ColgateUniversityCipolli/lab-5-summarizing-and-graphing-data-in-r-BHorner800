\documentclass{article}
\usepackage{amsmath} %This allows me to use the align functionality.
                     %If you find yourself trying to replicate
                     %something you found online, ensure you're
                     %loading the necessary packages!
\usepackage{amsfonts}%Math font
\usepackage{graphicx}%For including graphics
\usepackage{hyperref}%For Hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\hypersetup{colorlinks = true,citecolor=black} %set citations to have black (not green) color
\usepackage{natbib}        %For the bibliography
\setlength{\bibsep}{0pt plus 0.3ex}
\bibliographystyle{apalike}%For the bibliography
\usepackage[margin=0.50in]{geometry}
\usepackage{float}
\usepackage{multicol}

%fix for figures
\usepackage{caption}
\newenvironment{Figure}
  {\par\medskip\noindent\minipage{\linewidth}}
  {\endminipage\par\medskip}
\begin{document}

\vspace{-1in}
\title{Lab 2 -- MATH 240 -- Computational Statistics}

\author{
  Ben Horner \\
  Colgate University  \\
  Math Department  \\
  {\tt bhorner@colgate.edu}
}

\date{Febuary 13, 2025}

\maketitle

\begin{multicols}{2}
\begin{abstract}
In an attempt to determine which band contributed most to the song \emph{Allentown} by Manchester Orchestra and the Front Bottoms, with a contribution by Nate Hussey of All Get Out, we analyze the Essentia data of their songs. Beginning with the \texttt{.wav} files for each of their songs, we convert them to a batch file of \texttt{.json} outputs which we can run through Essentia. These outputs, along with other key descriptive features of each song are analyzed for each artist and then compared to Allentown, determining whether it is \emph{Within Range, Out of Range}, or \emph{Outlying}. These results indicate that the Manchester Orchestra contributed the most to the song, as they have the most features of Allentown \emph{Within Range}, while the other contributors have the most \emph{Out of Range} and \emph{Outlying} features.

\end{abstract}

\noindent \textbf{Keywords:} Batch File, Data Processing, Music, Essentia

\section{Introduction}
  In 2018, two of Professor Cipolli's favorite bands -- The Front Bottoms and Manchester Orchestra -- released a song they collaborated on called Allentown. In a statement to Noisey --  the music arm of Vice -- Andy Hull of Manchester Orchestra recalled that the creation of this track started when Nate Hussey of All Get Out sent him the first four lines of the track. Andy Hull worked out the melody and music and shared it with Brian Sella of The Front Bottoms, who then helped develop the chorus.

\textbf{This brings us to an interesting question:} which band contributed most to the song?
 
 
\subsection{Task}
  To attempt to answer this question, we need to know what each band ``sounds like." This can be done by using Essentia -- an open-source program for music analysis, description, and synthesis -- to create data about each band's tracks \citep{Essentia}. 
  
  First, we will create generalized code for building batch file that contains the command to run Essentia's extractor on every track. Then, we will clean the data and collect key descriptors from the \texttt{.json} files for each song and merge with the \texttt{.csv} file with data from the Essentia models. Finally, we will compare the key descriptive features from ``Allentown" to that of other songs by each artist, determining whether it is within that artist's range or not, indicating who contributed more. 



\section{Methods}
  We divide our overall goal in to two tasks. \textbf{Task 1}, where we build the batch files for data processing, \textbf{Task 2}. For this Lab, we initially use test files created by Professor Cipolli located in a directory labeled ``MUSIC" for \textbf{Task 1}, followed by the actual \texttt{.json} song files in the directory ``EssentiaOutput" for \textbf{Task 2}.


\subsection{Task 1: Building a Batch File for Data Processing}
  To create the desired batch file, we need to change the format from \texttt{[track number]-[artist]-[track name].wav} to \texttt{[artist name]-[album name]-[track name].json}. We will be using the \texttt{stringr} \citep{stringr} and \texttt{jsonlite} \citep{jsonlite} packages for \texttt{R} throughout the code to split the file names and process \texttt{.json} files.
  
<<echo = FALSE, eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
library(stringr)
library(jsonlite)
@






For the test \texttt{.wav} files, we isolate the subdirectories (artists and albums) and files (songs) within the \texttt{MUSIC} directory using the \texttt{list\_dirs(), list\_files()} and the \texttt{str\_count()} functions.

<<echo = FALSE, eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
artist.dirs = c()
album.dirs = c()
for (directory in music.dirs){
  dir.level <- str_count(directory, pattern = "/")
  if (dir.level == 1){
  artist.dirs = append(artist.dirs, directory)
  }
  else if (dir.level == 2){
    album.dirs = append(album.dirs, directory)
  }
}
@





  
  To create the command to run Essentia on each of the files, we pasted \texttt{streaming\_extractor\_music.exe} to the new file name to create the command line prompt for the current track.

<<echo=FALSE, eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
json.files = c()
for (album in album.dirs){
  #Splits the string of the directory into Music, Artist, Album
  split.string = str_split(album, pattern = "/", simplify = TRUE)
  album.name = split.string[1, 3]
  artist.name = split.string[1, 2]
  art.n.album = paste(artist.name, album.name, sep = "-") 
  #artist and album comined in desired format

  #Lists the music files in each album, goes through them, 
  #creates the final desired string of 
  #[artist name]-[album name]-[trackname].json
  music.files <- list.files(album)
  for (music.file in music.files){
    if (str_count(music.file, pattern = ".wav")){
      #Makes sure we are only dealing with .wav files
      file.path = str_split(music.file, pattern = ".wav", simplify =  TRUE)
      file.path = str_split(file.path, pattern = "-", simplify = TRUE)
      song.name = file.path[1, 3]
      final.path = paste(art.n.album, "-", song.name, ".json", sep = "")
      json.files = append(wav.files, final.path) #will contain all of the .wav files in all of the albums 
    }
  }
}

code.to.process = paste("streaming_extractor_music.exe ", json.files)
@





Finally, using the \texttt{writeLines()} function, we wrote the command line for each file to a \texttt{.txt} file called batfile.txt. This code can be generalized for any set of .wav files provided the same initial format of directories and file name.

<<echo=FALSE, eval = FALSE, size="scriptsize", warning=FALSE, message=FALSE>>=
writeLines(code.to.process, "batfile.txt")
@








\subsection{Task 2: Process JSON Output}
As a test for our analysis of the Essentia output, we first analyzed the \texttt{.json} output for the song ``Au Revoir (Adios)," by isolating the key descriptors of \texttt{average\_loudness}, \texttt{mean} of \texttt{spectral\_energy, danceability, bpm, key\_key} (musical key) \texttt{key\_scale} (musical mode), and \texttt{length} (duration in seconds). 

\subsection{Cleaning the Data}
  Using ``Aur Revoir (Adios) as the example, we can loop through every \texttt{.json} file in the \texttt{EssentiaOutput} folder and save the output as a new dataframe which now contains just each artist, album, and song's descriptors. 
  To use the data from the Essentia models, saved in the \texttt{EssentiaModelOutput.csv} file, we extracted the \texttt{valence} and \texttt{arousal}, \texttt{aggressive, happy, party, relaxed}, and \texttt{sad} moods, \texttt{acoustic} and \texttt{electric} sounds, \texttt{instrumental} (absence of voice), and \texttt{timbre} via averaging the values for each descriptor from the datasets of DEAM, emoMusic, MuSe, EffNew, and MSD-MusiCNN. We only saved these values in addition to \texttt{artist, album} and \texttt{track}.
  
  Finally, we merged the data from the music extractor calls (the \texttt{.json} files), the Essentia models, and \textbf{LIWCOutput} (Linguistic, Inquiry, and Word Count) psychometric properties into one data frame. For future use, we created two separate files: \texttt{trainingdata.csv} that contains all tracks except ``Allentown," and \texttt{testingdata.csv} that contains just the track ``Allentown."


\subsection{Analysis}
To determine each band's contribution to ``Allentown," we summarized the min, max, lower fence, and upper fence for each descriptive feature, grouped by artist. We can then use this to determine whether that same feature on `Allentown" is \emph{Within Range} (feature value is less than minimum), \emph{Outlying} (feature value is between lower and upper fence), or \emph{Out of Range} (feature is greater than max) for each artist, which indicates how typical ``Allentown" is compared to their other works. More features \emph{Within Range} and less \emph{Out of Range} would indicate that the artist contributed more to the song. 


\section{Results}
Counting the number of features, grouped by artist, which are typical of them indicates that Manchester Orchestra contribtued most to the song ``Allentown." Not only does it have the most number of features that are \emph{Within Range} (183), but also has the least \emph{Out of Range} features with jsut three. The outlying values across all artists are comparable, with All Get Out and The Front Bottoms also having comparable within and out of range values, both differing from Manchester Orchestra. While individual features might be contributed to more heavily by one group, such as the LIWC descriptor \texttt{you} which is \emph{Out of Range} for Manchester Orchestra, but within for the other two artists, in total, ``Allentown" was within the range of the Manchester Orchestra the most.



% Bar Chart for the DataFrame

<<plot1, echo=FALSE, warning=FALSE, message=FALSE>>=
library(ggplot2)


# Reshape the dataframe for plotting
my_data_long <- reshape(my_data_frame, 
                        varying = c("Within_Range", "Outlying", "Out_of_Range"), 
                        v.names = "value", 
                        timevar = "category", 
                        times = c("Within Range", "Outlying", "Out of Range"),
                        direction = "long")

# Create the bar chart using ggplot2
ggplot(my_data_long, aes(x = artist, y = value, fill = category)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Category Counts by Artist",
       y = "Count",
       x = "Artist") +
  theme_minimal()
@
\begin{figure}[ht]
  \begin{center}
  <<echo=FALSE, warning=FALSE, message=FALSE, fig.dim=c(5,3.5)>>=
<<plot1>>
@
\caption{The number of features for each artist that are Within Range, Outlying, or Out of Range.}
  \label{plot1}
  \end{center}
\end{figure}
\columnbreak


% latex table generated in R 4.4.2 by xtable 1.8-4 package
% Thu Feb 27 13:00:45 2025
\begin{table}[ht]
\centering
\begin{tabular}{rlrrr}
  \hline
 & artist & Within\_Range & Outlying & Out\_of\_Range \\ 
  \hline
1 & All Get Out & 158.00 & 17.00 & 22.00 \\ 
  2 & Manchester Orchestra & 183.00 & 11.00 & 3.00 \\ 
  3 & The Front Bottoms & 156.00 & 11.00 & 30.00 \\ 
   \hline
\end{tabular}
\end{table}


\section{Discussion}
In this Lab, we laid the ground work for analyzing many more songs by other artists, as now we have the code to process them into \texttt{.json} files to be output and analyzed for key descriptors. Additionally, we created the code to clean and organize the song data, while getting practice in installing, loading, and using libraries, working with character objects, coding \texttt{for()} loops, and accessing elements of vectors and lists. Finally, comparing across artists allows us to now determine who, among a collaboration, contributed the most to specific song, as we did when determining Manchester Orchestra contributed the most to ``Allentown."

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bibliography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\vspace{2em}


\begin{tiny}
\bibliography{bib}
\end{tiny}
\end{multicols}



\end{document}